{
    "collab_server" : "",
    "contents" : "library(shiny)\nshinyServer(function(input, output) {\n  \n  \n  output$distPlot <- renderPlot({\n    \n    if(!require(\"devtools\")) install.packages(\"devtools\")\n    library(\"devtools\")\n    install_github(\"pablobarbera/scholarnetwork\",force=FALSE)\n    library(\"scholar\")\n    \n    extractAuthors <- function(x){\n      authors <- unlist(stringr::str_split(x, \",\"))\n      # deleting empty authors\n      authors <- authors[grepl('[A-Za-z]+', authors)]\n      # cleaning author list\n      authors <- stringr::str_trim(authors)\n      # keeping only initial of first name\n      first <- gsub('(^[A-Z]{1}).*', authors, repl=\"\\\\1\")\n      last <- gsub(\"^[A-Z]* ([[:alnum:]'’]+).*\", authors, repl=\"\\\\1\")\n      #fix curly apostrophes\n      last <- gsub('’', \"\\\\'\", last)\n      # fixing capitalization of last name\n      last <- gsub(\"(^|'|’|[[:space:]])([[:alpha:]])\", \"\\\\1\\\\U\\\\2\", last, perl=TRUE)\n      last <- stringr::str_to_title(last)\n      authors <- paste(first, last, sep=\" \")\n      # if more than one author, create edge list\n      if (length(authors)>1){\n        edges <- as.data.frame(t(combn(x=authors, m=2)), stringsAsFactors=F)\n        names(edges) <- c(\"node1\", \"node2\")\n        edges$weight <- 1/length(authors)\n        return(edges)\n      }\n      if (length(authors)<=1) return(NULL)\n    }\n    extractNetwork <- function(id, n=500, largest_component=FALSE, ...){\n      \n      # downloading publications\n      pubs <- scholar::get_publications(id=id, pagesize=n, ...)\n      \n      # converting to edges\n      edges <- lapply(pubs$author, extractAuthors)\n      edges <- do.call(rbind, edges)\n      edges <- aggregate(edges$weight,\n                         by=list(node1=edges$node1, node2=edges$node2),\n                         FUN=function(x) sum(x))\n      names(edges)[3] <- \"weight\"\n      \n      # extracting node-level information\n      network <- igraph::graph.edgelist(as.matrix(edges[,c(\"node1\", \"node2\")]), \n                                        directed=FALSE)\n      igraph::edge_attr(network, \"weight\") <- edges$weight\n      \n      ### SELECT LARGEST COMPONENT\n      if (largest_component==TRUE){\n        network <- decompose(network)[[1]]\n      }\n      \n      fc <- igraph::walktrap.community(network)\n      nodes <- data.frame(label = igraph::V(network)$name,\n                          degree=igraph::strength(network), group=fc$membership,\n                          stringsAsFactors=F)\n      nodes <- nodes[order(nodes$label),]\n      if (largest_component==TRUE){\n        edges <- edges[edges$node1 %in% nodes$label & edges$node2 %in% nodes$label,]\n      }\n      return(list(nodes=nodes, edges=edges))\n    }\n    \n    citid <- strsplit((strsplit(input$scholarID,\"&\",fixed = TRUE)[[1]][1]),\"=\",fixed = TRUE)[[1]][2]\n    d <- extractNetwork(id=citid, n=500)\n    library(ggplot2)\n    library(igraph)\n    # cleaning network data\n    network <- graph_from_data_frame(d$edges, directed=FALSE)\n    set.seed(123)\n    l <- layout.fruchterman.reingold(network, niter=1500) # layout\n    fc <- walktrap.community(network) # community detection\n    \n    # node locations\n    nodes <- data.frame(l); names(nodes) <- c(\"x\", \"y\")\n    nodes$cluster <- factor(fc$membership)\n    nodes$label <- fc$names\n    nodes$degree <- degree(network)\n    \n    # edge locations\n    edgelist <- get.edgelist(network, names=FALSE)\n    edges <- data.frame(nodes[edgelist[,1],c(\"x\", \"y\")], nodes[edgelist[,2],c(\"x\", \"y\")])\n    names(edges) <- c(\"x1\", \"y1\", \"x2\", \"y2\")\n    \n    # and now visualizing it...\n    p <- ggplot(nodes, aes(x=x, y=y, color=cluster, label=label, size=degree))\n    pq <- p  +\n      # nodes\n      geom_point(color=\"white\", aes(fill=cluster,size=degree*8),\n                 shape=21, alpha=1/3.5,stroke=15) +\n      \n      # geom_point(color=\"black\", size=4.5)+\n      # geom_point(color=\"pink\", size=4)+\n      # geom_point(aes(shape = cluster))+\n      \n      # edges\n      geom_curve(\n        aes(x=x1, y=y1, xend=x2, yend=y2,label=NA),\n        data=edges, size=0.25, color=\"gray85\", alpha=1/1.8,curvature = 0.09) +\n      ## note that here I add a border to the points\n      scale_fill_discrete(labels=labels) +\n      scale_size_continuous(range = c(4, 25)) +\n      geom_text(color=\"gray31\", aes(size=degree))+\n      #theme_economist() + \n      #scale_color_economist()\n      theme(\n        panel.background = element_rect(fill = \"gray75\"),\n        plot.background = element_rect(fill=\"gray100\"),\n        axis.line = element_blank(), axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(), panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"none\"\n        # ,\n        #\n        # legend.background = element_rect(colour = F, fill = \"black\"),\n        # legend.key = element_rect(fill = \"darkgrey\", colour = F),\n        # legend.title = element_text(color=\"white\"),\n        # legend.text = element_text(color=\"white\")\n      ) #+\n      ## changing size of points in legend\n      #guides(fill = guide_legend(override.aes = list(size=5)))\n    \n    pq\n\n  })\n\n})\n",
    "created" : 1511794461675.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3208669823",
    "id" : "72B5B745",
    "lastKnownWriteTime" : 1511794372,
    "last_content_update" : 1511794372,
    "path" : "~/GitHub/ScholarNetworkApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}